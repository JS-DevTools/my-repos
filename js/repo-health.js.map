{
  "version": 3,
  "sources": [
    "..\\node_modules\\browser-pack\\_prelude.js",
    "..\\_ts\\components\\app.tsx",
    "..\\_ts\\components\\edit-dashboard\\account-list.tsx",
    "..\\_ts\\components\\edit-dashboard\\add-account-form.tsx",
    "..\\_ts\\components\\edit-dashboard\\dialog.tsx",
    "..\\_ts\\index.tsx",
    "..\\_ts\\params.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "import { params } from \"../params\";\nimport { EditDashboardDialog } from \"./edit-dashboard/dialog\";\n\n\nexport function App() {\n  if (params.isNew) {\n    return <EditDashboardDialog />;\n  }\n  else {\n    return <main>Hello, world</main>;\n  }\n}\n",
    "import { GitHubAccount, GitHubAccountMap } from \"./state\";\n\ninterface Props {\n  accounts: GitHubAccountMap;\n  removeAccount(accountName: string): void;\n  toggleRepo(accountName: string, repoName: string, include: boolean): void;\n}\n\ninterface State {\n  selectedAccount: string;\n}\n\nexport class AccountList extends React.Component<Props, State> {\n  public readonly state: State = {\n    selectedAccount: \"\",\n  };\n\n  public render() {\n    // Determine the selected account, or fallback to the first account in the list\n    let selectedAccountKey = this.state.selectedAccount || [...this.props.accounts.keys()][0];\n    let selectedAccount = this.props.accounts.get(selectedAccountKey);\n\n    return (\n      <div id=\"edit_account_list\">\n        <AccountNameList accounts={this.props.accounts} selected={selectedAccount} />\n        <RepoList account={selectedAccount} />\n      </div>\n    );\n  }\n}\n\n\nfunction AccountNameList({ accounts, selected }: { accounts: GitHubAccountMap, selected: GitHubAccount | undefined }) {\n  return (\n    <ul className=\"account-name-list\">\n      {[...accounts.entries()].map(([key, account]) => (\n        <li className=\"account-name\" key={key}>\n          {account.name}\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n\nfunction RepoList({ account }: { account: GitHubAccount | undefined }) {\n  return (\n    <ul className=\"repo-list\">\n      {account && [...account.repos.entries()].map(([key, repo]) => (\n        <li className=\"repo\" key={key}>\n          {repo.name}\n        </li>\n      ))}\n    </ul>\n  );\n}\n",
    "import { ChangeEvent, FormEvent } from \"react\";\n\ninterface Props {\n  addAccount(name: string): void;\n}\n\ninterface State {\n  accountName: string;\n}\n\nexport class AddAccountForm extends React.Component<Props, State> {\n  public readonly state: State = {\n    accountName: \"\",\n  };\n\n  public render() {\n    return (\n      <form id=\"add_account_form\" onSubmit={this.handleSubmit}>\n        <div className=\"clearfix\">\n          <dl className=\"form-group\">\n            <dt className=\"input-label\">\n              <label htmlFor=\"repo_owner\">GitHub Username</label>\n            </dt>\n            <dd className=\"input-field\">\n              <input type=\"text\" name=\"account_name\" className=\"form-control short\"\n                maxLength={100} autoFocus autoCapitalize=\"off\" autoComplete=\"off\" spellCheck={false}\n                value={this.state.accountName} onChange={this.handleChange} />\n            </dd>\n          </dl>\n\n          <button type=\"submit\" className=\"btn btn-primary\">Add</button>\n        </div>\n      </form>\n    );\n  }\n\n  private handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ accountName: event.target.value });\n  }\n\n  private handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (this.state.accountName) {\n      this.props.addAccount(this.state.accountName);\n      this.setState({ accountName: \"\" });\n    }\n  }\n}\n",
    "import { params } from \"../../params\";\nimport { AccountList } from \"./account-list\";\nimport { AddAccountForm } from \"./add-account-form\";\nimport { GitHubAccountMap } from \"./state\";\n\ninterface State {\n  accounts: GitHubAccountMap;\n}\n\nexport class EditDashboardDialog extends React.Component<{}, State> {\n  public readonly state: State = {\n    accounts: new Map(),\n  };\n\n  public render() {\n    return (\n      <div className=\"dialog-container\">\n        <dialog open className={this.state.accounts.size === 0 ? \"open empty\" : \"open\"}>\n          <header className=\"dialog-header\">\n            <img className=\"logo\" src=\"img/logo.png\" alt=\"logo image\" />\n            <h1>GitHub Repo Health</h1>\n            <h2>See the health of all your GitHub repos on one page</h2>\n          </header>\n          <div className=\"dialog-body\">\n            <h3>{getTitle()}</h3>\n            <AddAccountForm addAccount={this.addAccount} />\n            <AccountList accounts={this.state.accounts}\n              removeAccount={this.removeAccount} toggleRepo={this.toggleRepo} />\n          </div>\n\n          <footer className=\"dialog-footer\">\n            <button type=\"button\" disabled className=\"btn\">Cancel</button>\n            <button type=\"button\" disabled className=\"btn btn-primary\">Create My Dashboard</button>\n          </footer>\n        </dialog>\n\n        <div className=\"backdrop\"></div>\n      </div>\n    );\n  }\n\n  private addAccount = (accountName: string) => {\n    accountName = accountName.trim();\n    let accounts = new Map(this.state.accounts.entries());\n    let key = accountName.toLowerCase();\n\n    if (!accounts.has(key)) {\n      accounts.set(key, {\n        name: accountName,\n        repos: new Map(),\n      });\n    }\n\n    this.setState({ accounts });\n  }\n\n  private removeAccount = (accountName: string) => {\n    accountName = accountName.trim();\n    let accounts = new Map(this.state.accounts.entries());\n    let key = accountName.toLowerCase();\n\n    accounts.delete(key);\n\n    this.setState({ accounts });\n  }\n\n  private toggleRepo = (accountName: string, repoName: string, include: boolean) => {\n    accountName = accountName.trim();\n    repoName = repoName.trim();\n    let accounts = new Map(this.state.accounts.entries());\n    let accountKey = accountName.toLowerCase();\n    let repoKey = repoName.toLowerCase();\n\n    accounts.get(accountKey)!.repos.get(repoKey)!.include = include;\n\n    this.setState({ accounts });\n  }\n}\n\n\nfunction getTitle(): string {\n  if (params.isNew) {\n    return \"Hi! 👋 Enter your GitHub username below to get started\";\n  }\n  else {\n    return \"Edit Your Dashboard\";\n  }\n}\n",
    "import { App } from \"./components/app\";\n\nReactDOM.render(<App />, document.getElementById(\"react-app\"));\n",
    "class Params {\n  public isNew: boolean;\n  private _query = new URLSearchParams(location.search);\n\n\n  public constructor() {\n    // If the params are empty when the page first loads, then we're building a new dashboard,\n    // rather than showing or editing an existing one\n    this.isNew = this.isEmpty;\n  }\n\n\n  public get isEmpty(): boolean {\n    return !this._query.has(\"include\");\n  }\n\n\n  public toString() {\n    this._query.sort();\n    return this._query.toString();\n  }\n}\n\n/**\n * Singleton reference to the page's query params\n */\nexport const params = new Params();\n"
  ]
}